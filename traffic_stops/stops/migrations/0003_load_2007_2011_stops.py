# Generated by Django 4.1 on 2023-02-11 16:59
from django.db import migrations
from stops.models import Stop
import os, csv, datetime, dateparser, ipdb
from traffic_stops.settings import BASE_DIR, LOADER_DEBUG
from stops.utils.loaders import convert_date, convert_time, \
        convert_int, convert_duration, get_year


### START CONFIG ###
data_dir = str(BASE_DIR) + '/data/'
data_filenames = ['2011 ITSS Data.txt',
        '2010 ITSS Data.txt',
        '2009 Raw Data Statewide.txt',
        '2008 Raw Data Statewide.txt',
        '2007 Raw Data Statewide without Chicago.txt',
        ]
### END CONFIG ###


def load_files(apps,schema_editor):
    # load each file one at a time
    for filename in data_filenames:
        print('loading',filename)
        file_path = data_dir + filename 
        year = filename[0:4]
        # convert to csv
        data_file = open(file_path,encoding='latin-1') #TODO verify this encoding
        data_csv = csv.DictReader(data_file,delimiter='~')
        try:
            load_data(data_csv,year)
        except Exception as e:
            print('file loading error',filename,e)
            import ipdb; ipdb.set_trace()


def load_data(data_csv,year):
    # keep track of each stop
    stop_objs = []
    counter = 1
    
    # handle inconsistent field names
    agency_row_name = 'AgencyName' if 'AgencyName' in data_csv.fieldnames else 'Agency Name'
    zipcode_row_name = 'ZIPCode' if 'ZIPCode' in data_csv.fieldnames else 'ZIP'
    driver_yob_row_name = 'DriversYearofBirth' if 'DriversYearofBirth' in data_csv.fieldnames else 'DriverYearofBirth'
   
    #header_assignments = header_assignments()

    for row in data_csv:
        # date, time splitting starts in 2011
        if year == '2011':
            row_date = row['DateOfStop']
            row_time = row['TimeOfStop']
        else:
            row_date = row['DateAndTimeOfStop'].split()[0]
            row_date_formatted = convert_date(row_date)
            row_time = ' '.join(row['DateAndTimeOfStop'].split()[1:])
            # cleanup to handle imprecise slicing (hours can be single digits)
            if row_time[-1] == ':':
                row_time = row_time[:-1]
        row_time_formatted = convert_time(row_time,row)
        row_duration = row['DurationOfStop']
        row_duration_formatted = convert_duration(row_duration)
        pk = int(year + str(counter))
        
        # cleanup
        for key in row:
            if row[key] in ('#REF!',''):
                row[key] = None
            # convert ints to int or none
            if key in ['VehicleYear']:
                row[key] = convert_int(row[key],counter)


        try:
            stop_obj = Stop(
                        pk = pk,
                        AgencyCode = row['AgencyCode'],
                        AgencyName = row[agency_row_name],
                        year = get_year(row_date_formatted),
                        DateOfStop = row_date_formatted,
                        TimeOfStop = row_time_formatted,
                        DurationOfStop = row_duration_formatted,
                        ZIP = row[zipcode_row_name],
                        VehicleMake = row['VehicleMake'],
                        VehicleYear = row['VehicleYear'],
                        DriversYearofBirth = row[driver_yob_row_name],
                        DriverSex = row['DriverSex'],
                        DriverRace = row['Race'],
                        ReasonForStop = row['ReasonForStop'],
                        TypeOfMovingViolation = row['MovingViolationType'],
                        ResultOfStop = row['ResultOfStop'],
                        BeatLocationOfStop = row['BeatLocationOfStop'],
                        SearchConducted = row['SearchConducted'],
                        VehicleSearchType = row['VehicleSearchType'],
                        PassengersSearchType = row['PassengersSearchType'],
                        DriverSearchType = row['DriverSearchType'],
                        ContrabandFound = row['ContrabandFound'],
                        DrugsFound = row['DrugsFound'],
                        AlcoholFound = row['AlcoholFound'],
                        ParaphernaliaFound = row['ParaphernaliaFound'],
                        WeaponFound = row['WeaponFound'],
                        StolenPropertyFound = row['StolenPropertyFound'],
                        OtherContrabandFound = row['OtherContrabandFound'],
                        DrugQuantity = row['DrugQuantity'],
                        ConsentSearchRequested = row['ConsentSearchRequested'],
                        WasConsentGranted = row['WasConsentGranted'],
                        WasConsentSearchPerformed = row['WasConsentSearchPerformed'],
                        WasConsentContrabandFound = row['WasConsentContrabandFound'],
                        ConsentDrugsFound = row['ConsentDrugsFound'],
                        ConsentAlcoholFound = row['ConsentAlcoholFound'],
                        ConsentParaphernaliaFound = row['ConsentParaphernaliaFound'],
                        ConsentWeaponFound = row['ConsentWeaponFound'],
                        ConsentStolenPropertyFound = row['ConsentStolenPropertyFound'],
                        ConsentOtherContrabandFound = row['ConsentOtherContrabandFound'],
                        ConsentDrugQuantity = row['ConsentDrugQuantity'],
                )
            stop_objs.append(stop_obj)

        except Exception as e:
            print('pk:',pk)
            print('error:',e)

        counter += 1
        if LOADER_DEBUG:
            if counter > 10:
                break


    Stop.objects.bulk_create(stop_objs)

class Migration(migrations.Migration):

    dependencies = [
        ('stops', '0002_load_2012_current_stops'),
    ]

    operations = [
        migrations.RunPython(load_files)
    ]
